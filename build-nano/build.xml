<?xml version="1.0" encoding="UTF-8"?>
<project name="build-nano" xmlns:ivy="antlib:org.apache.ivy.ant">

    <path id="bundles"/>

	<property file="${basedir}/../build.properties"/>
	<property file="${basedir}/../build.versions"/>
	<import file="${basedir}/../virgo-build/multi-bundle/default.xml"/>
	
	<target name="package" depends="ivy.init">		
		<delete dir="${package.output.dir}" quiet="true"/>
		<mkdir dir="${package.output.dir}"/>

		<!-- Assemble the common resources -->
        <property name="common.resources" value="${target.dir}/common_resources"/>
		<ivy:resolve resolveId="copy.path" file="${basedir}/lib-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${common.resources}/lib/[artifact]_[revision].[ext]" conf="lib" type="jar"/>
		
		<mkdir dir="${common.resources}/config"/>
		<mkdir dir="${common.resources}/pickup"/>
		
		<echo file="${common.resources}/lib/.version"
				message="virgo.nano.version=${bundle.version}&#xa;"/>
		
		<copy todir="${common.resources}" failonerror="false">
			<fileset dir="${basedir}/resources"/>
		</copy>
        
        <copy todir="${common.resources}/lib" failonerror="false">
			<fileset dir="${basedir}/lib"/>
		</copy>
        
        <copy todir="${common.resources}/config" failonerror="false">
			<fileset dir="${basedir}/config" excludes="keystore"/>
		</copy>
		
		<copy file="${basedir}/config/keystore" todir="${common.resources}/config" failonerror="false"/>
		
        <!-- Assemble the scripts -->
        <property name="scripts" value="${target.dir}/scripts"/>
		<copy todir="${scripts}/bin" failonerror="false">
			<fileset dir="${basedir}/bin"/>
		</copy>
		
		<property name="common.resources.location" value="${target.dir}/common_resources_zipped"/>
        <property name="scripts.location" value="${target.dir}/scripts_zipped"/>
		<!-- prepare the scripts and the common resource sources for publishing -->
		<zip destfile="${common.resources.location}/binary/common_resources">
			<zipfileset dir="${common.resources}"/>
		</zip>
        <zip destfile="${scripts.location}/binary/scripts">
			<zipfileset dir="${scripts}"/>
		</zip>
        <!-- clean up -->
        <delete dir="${common.resources}" quiet="true"/>
        <delete dir="${scripts}" quiet="true"/>
		
		<!-- Copy the nano kernel artifacts to a prepared for publishing location - a p2 repo will be built around them -->
		<ivy:resolve resolveId="copy.path" file="${basedir}/nano-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="nano-runtime" type="jar"/>

		<ivy:resolve resolveId="copy.path" file="${basedir}/p2runtime-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="p2-runtime" type="jar"/>
        
        <ivy:resolve resolveId="copy.path" file="${basedir}/gemini-web-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="gemini-web" type="jar"/>
        
        <!-- Prepare the features for publishing -->
        <copy todir="${target.dir}/assembly/features" failonerror="false">
			<fileset dir="${basedir}/publish_resources/features" excludes="keystore"/>
		</copy>
        
        <antcall target="fetch-unzipped-virgo-build-tools"/>
        
        <property name="p2.products.location" value="${basedir}/publish_resources/products"/>
        <property name="p2.categories.location" value="${basedir}/publish_resources/categories"/>
        
        <antcall target="p2.publish-binary-chmod">
            <param name="repository" value="${repository.dir}"/>
            <param name="source" value="${common.resources.location}"/>
            <param name="chmod.args" value="org.eclipse.virgo.kernel.jmxremote.access.properties@/config#600"/>
        </antcall>
        <echo message="Published the commons resources to ${repository.dir}."/>
        
        <antcall target="p2.publish-binary-chmod">
            <param name="repository" value="${repository.dir}"/>
            <param name="source" value="${scripts.location}"/>
            <param name="chmod.args" value="startup.sh@/bin#755,dmk.sh@/bin#755,checkJava.sh@/bin#755,jconsole.sh@/bin#755,setupClasspath.sh@/bin#755,shutdown.sh@/bin#755"/>
        </antcall>
        <echo message="Published the scripts to ${repository.dir}."/>
        
        <antcall target="p2.publish-bundles-features">
            <param name="repository" value="${repository.dir}"/>
            <param name="source" value="${target.dir}/assembly"/>
        </antcall>
        <echo message="Published bundles and features to ${repository.dir}."/>
        
        <antcall target="p2.publish-product">
            <param name="repository" value="${repository.dir}"/>
            <param name="product.file.location" value="${p2.products.location}/nano/nano.product"/>
        </antcall>
        <echo message="Published nano product to ${repository.dir}."/>
        
        <antcall target="p2.publish-product">
            <param name="repository" value="${repository.dir}"/>
            <param name="product.file.location" value="${p2.products.location}/nanoweb/nanoweb.product"/>
        </antcall>
        <echo message="Published nanoweb product to ${repository.dir}."/>
        
		<antcall target="p2.publish-product">
            <param name="repository" value="${repository.dir}"/>
            <param name="product.file.location" value="${p2.products.location}/nanoweb-with-p2/nanoweb-with-p2.product"/>
        </antcall>
        <echo message="Published nanoweb-with-p2 product to ${repository.dir}."/>
   
        <antcall target="p2.publish-category">
            <param name="repository" value="${repository.dir}"/>
            <param name="category.file.location" value="${p2.categories.location}/org.eclipse.virgo.categories/category.xml"/>
        </antcall>
        <echo message="Published Virgo Add-Ons feature category in the p2 repository" />

        <antcall target="p2.install-virgo-product">
            <param name="repository" value="${repository.dir}"/>
            <param name="destination" value="${package.output.dir}"/>
            <param name="product.iu" value="nanoweb-with-p2.product"/>
        </antcall>
        <echo message="Installed the largest Nano flavor for distribution purposes."/>
        
        <zip destfile="${package.output.file}">
			<zipfileset dir="${package.dir}" includes="${package.basename}/bin/*.sh" filemode="755"/>
			<zipfileset dir="${package.dir}" includes="${package.basename}/config/org.eclipse.virgo.kernel.jmxremote.access.properties" filemode="600"/>
			<zipfileset dir="${package.dir}">
				<exclude name="${package.basename}/bin/*.sh"/>
				<exclude name="${package.basename}/config/org.eclipse.virgo.kernel.jmxremote.access.properties"/>
			</zipfileset>
		</zip>
        <zip destfile="${artifacts.dir}\${natural.name}-updatesite-${bundle.version}.zip">
			<zipfileset dir="${repository.dir}"/>
		</zip>
        
        <delete dir="${target.dir}/assembly" quiet="true"/>
        <delete dir="${common.resources.location}" quiet="true"/>
        <delete dir="${scripts.location}" quiet="true"/>
        <delete dir="${tools.dir}" quiet="true"/>
		
     </target>
    
    <target name="p2.publish" depends="package" description="Publishes dev repository to build.eclipse.org">
        
        <sshexec host="build.eclipse.org" 
                username="${eclipse.buildId}" 
                keyfile="${key.file}" 
                passphrase="${passphrase}"
                command="mkdir -pv /opt/public/rt/virgo/update-site/${release.type}/${build.stamp}"/>

        <scp todir="${eclipse.buildId}@build.eclipse.org:/opt/public/rt/virgo/update-site/${release.type}/${build.stamp}/" 
                keyfile="${key.file}"
                passphrase="${passphrase}">
            <fileset dir="${publishing.dir}"/>
        </scp>
        
    </target>
    
    <target name="ci.publish.nightly" depends="package" description="Publishes nightly repository to download.eclipse.org. Can be executed on Hudson only!">
        
        <delete dir="${nightly.updatesite.dir}"/>
        
        <copy toDir="${nightly.updatesite.dir}">
            <fileset dir="${publishing.dir}"/>
        </copy>
        
    </target>

	
</project>
