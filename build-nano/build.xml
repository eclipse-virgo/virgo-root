<?xml version="1.0" encoding="UTF-8"?>
<project name="build-nano" xmlns:ivy="antlib:org.apache.ivy.ant">
    <path id="unit.test.bundles">
		<pathelement location="../org.eclipse.virgo.kernel.core"/>
        <pathelement location="../org.eclipse.virgo.kernel.authentication"/>
        <pathelement location="../org.eclipse.virgo.kernel.shutdown"/>
	</path>
    <path id="bundles">
        <path refid="unit.test.bundles" />
    </path>

	<property file="${basedir}/../build.properties"/>
	<property file="${basedir}/../build.versions"/>
	<import file="${basedir}/../virgo-build/multi-bundle/default.xml"/>
	
	<target name="package" depends="ivy.init">		
		<delete dir="${package.output.dir}" quiet="true"/>
		<mkdir dir="${package.output.dir}"/>

		<!-- Assemble the common resources -->
        <property name="common.resources" value="${target.dir}/common_resources"/>
		<ivy:resolve resolveId="copy.path" file="${basedir}/lib-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${common.resources}/lib/[artifact]_[revision].[ext]" conf="lib" type="jar"/>
		
		<mkdir dir="${common.resources}/config"/>
		<mkdir dir="${common.resources}/pickup"/>
		
		<echo file="${common.resources}/lib/.version"
				message="virgo.nano.version=${bundle.version}&#xa;"/>
		
		<copy todir="${common.resources}" failonerror="false">
			<fileset dir="${basedir}/resources"/>
		</copy>
        
        <copy todir="${common.resources}/lib" failonerror="false">
			<fileset dir="${basedir}/lib"/>
		</copy>
        
        <copy todir="${common.resources}/config" failonerror="false">
			<fileset dir="${basedir}/config" excludes="keystore"/>
		</copy>
		
		<copy file="${basedir}/config/keystore" todir="${common.resources}/config" failonerror="false"/>
		
        <!-- Assemble the scripts -->
        <property name="scripts" value="${target.dir}/scripts"/>
		<copy todir="${scripts}/bin" failonerror="false">
			<fileset dir="${basedir}/bin"/>
		</copy>
		
		<property name="common.resources.location" value="${target.dir}/common_resources_zipped"/>
        <property name="scripts.location" value="${target.dir}/scripts_zipped"/>
		<!-- prepare the scripts and the common resource sources for publishing -->
		<zip destfile="${common.resources.location}/binary/common_resources">
			<zipfileset dir="${common.resources}"/>
		</zip>
        <zip destfile="${scripts.location}/binary/scripts">
			<zipfileset dir="${scripts}"/>
		</zip>
        <!-- clean up -->
        <delete dir="${common.resources}" quiet="true"/>
        <delete dir="${scripts}" quiet="true"/>
		
		<!-- Copy the nano kernel artifacts to a prepared for publishing location - a p2 repo will be built around them -->
		<ivy:resolve resolveId="copy.path" file="${basedir}/nano-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="nano-runtime" type="jar"/>

		<ivy:resolve resolveId="copy.path" file="${basedir}/p2runtime-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="p2-runtime" type="jar"/>
        
        <ivy:resolve resolveId="copy.path" file="${basedir}/gemini-web-ivy.xml" transitive="true"/>
		<ivy:retrieve resolveId="copy.path" pattern="${target.dir}/assembly/plugins/[artifact]_[revision].[ext]" conf="gemini-web" type="jar"/>
        
        <!-- Prepare the features for publishing -->
        <copy todir="${target.dir}/assembly/features" failonerror="false">
			<fileset dir="${basedir}/publish_resources/features" excludes="keystore"/>
            <filterset>
				<filter token="GEMINI.WEB" value="${org.eclipse.gemini.web}"/>
                <filter token="TOMCAT.VERSION" value="${org.apache.tomcat}"/>
				<filter token="NANO.VERSION" value="${bundle.version}"/>
				<filter token="EQUINOX.DS.VERSION" value="${org.eclipse.equinox.ds}"/>
				<filter token="MEDIC.VERSION" value="${org.eclipse.virgo.medic}"/>
				<filter token="FELIX.GOGO.SHELL.VERSION" value="${org.apache.felix.gogo.shell}"/>
                <filter token="FELIX.GOGO.RUNTIME.VERSION" value="${org.apache.felix.gogo.runtime}"/>
                <filter token="FELIX.GOGO.COMMAND.VERSION" value="${org.apache.felix.gogo.command}"/>
				<filter token="MINA.CORE.VERSION" value="${com.springsource.org.apache.mina.core}"/>
				<filter token="SSHD.CORE.VERSION" value="${com.springsource.org.apache.sshd.core}"/>
				<filter token="EQUINOX.CONSOLE.VERSION" value="${org.eclipse.equinox.console.supportability}"/>
				<filter token="SPRING.DM.VERSION" value="${org.springframework.osgi}"/>
				<filter token="UTIL.VERSION" value="${org.eclipse.virgo.util}"/>
                <filter token="CONTENTTYPE.VERSION" value="${org.eclipse.core.contenttype}"/>
                <filter token="JOBS.VERSION" value="${org.eclipse.core.jobs}"/>
                <filter token="CORE.VERSION" value="${org.eclipse.core.runtime}"/>
                <filter token="ECF.VERSION" value="${org.eclipse.ecf}"/>
                <filter token="ECF.FT.VERSION" value="${org.eclipse.ecf.filetransfer}"/>
                <filter token="ECF.I.VERSION" value="${org.eclipse.ecf.identity}"/>
                <filter token="ECF.P.FT.VERSION" value="${org.eclipse.ecf.provider.filetransfer}"/>
                <filter token="ECF.SSL.VERSION" value="${org.eclipse.ecf.ssl}"/>
                <filter token="EQUINOX.APP.VERSION" value="${org.eclipse.equinox.app}"/>
                <filter token="EQUINOX.COMMON.VERSION" value="${org.eclipse.equinox.common}"/>
                <filter token="EQUINOX.FRKA.VERSION" value="${org.eclipse.equinox.frameworkadmin}"/>
                <filter token="EQUINOX.FRKA.E.VERSION" value="${org.eclipse.equinox.frameworkadmin.equinox}"/>
                <filter token="P2.A.R.VERSION" value="${org.eclipse.equinox.p2.artifact.repository}"/>
                <filter token="P2.CONSOLE.VERSION" value="${org.eclipse.equinox.p2.console}"/>
                <filter token="P2.CORE.VERSION" value="${org.eclipse.equinox.p2.core}"/>
                <filter token="P2.DIRECTOR.VERSION" value="${org.eclipse.equinox.p2.director}"/>
                <filter token="P2.ENGINE.VERSION" value="${org.eclipse.equinox.p2.engine}"/>
                <filter token="P2.GC.VERSION" value="${org.eclipse.equinox.p2.garbagecollector}"/>
                <filter token="P2.JP.VERSION" value="${org.eclipse.equinox.p2.jarprocessor}"/>
                <filter token="P2.METADATA.VERSION" value="${org.eclipse.equinox.p2.metadata}"/>
                <filter token="P2.M.R.VERSION" value="${org.eclipse.equinox.p2.metadata.repository}"/>
                <filter token="P2.PUBLISHER.VERSION" value="${org.eclipse.equinox.p2.publisher}"/>
                <filter token="P2.P.E.VERSION" value="${org.eclipse.equinox.p2.publisher.eclipse}"/>
                <filter token="P2.REPOSITORY.VERSION" value="${org.eclipse.equinox.p2.repository}"/>
                <filter token="P2.T.E.VERSION" value="${org.eclipse.equinox.p2.touchpoint.eclipse}"/>
                <filter token="P2.T.N.VERSION" value="${org.eclipse.equinox.p2.touchpoint.natives}"/>
                <filter token="P2.T.ECF.VERSION" value="${org.eclipse.equinox.p2.transport.ecf}"/>
                <filter token="EQUINOX.PFRCS.VERSION" value="${org.eclipse.equinox.preferences}"/>
                <filter token="EQUINOX.REGISTRY.VERSION" value="${org.eclipse.equinox.registry}"/>
                <filter token="EQUINOX.SECURITY.VERSION" value="${org.eclipse.equinox.security}"/>
                <filter token="EQUINOX.SC.VERSION" value="${org.eclipse.equinox.simpleconfigurator}"/>
                <filter token="EQUINOX.SC.M.VERSION" value="${org.eclipse.equinox.simpleconfigurator.manipulator}"/>
			</filterset>
		</copy>
        
        <antcall target="fetch-unzipped-virgo-build-tools"/>
        
        <property name="p2.products.location" value="${basedir}/publish_resources/products"/>
        <property name="p2.categories.location" value="${basedir}/publish_resources/categories"/>
        
        <antcall target="p2.publish-binary-chmod">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="source" value="${common.resources.location}"/>
            <param name="chmod.args" value="org.eclipse.virgo.kernel.jmxremote.access.properties@/config#600"/>
        </antcall>
        <echo message="Published the commons resources to ${p2.repository.dir}."/>
        
        <antcall target="p2.publish-binary-chmod">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="source" value="${scripts.location}"/>
            <param name="chmod.args" value="startup.sh@/bin#755,dmk.sh@/bin#755,checkJava.sh@/bin#755,jconsole.sh@/bin#755,setupClasspath.sh@/bin#755,shutdown.sh@/bin#755"/>
        </antcall>
        <echo message="Published the scripts to ${p2.repository.dir}."/>
        
        <antcall target="p2.publish-bundles-features">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="source" value="${target.dir}/assembly"/>
        </antcall>
        <echo message="Published bundles and features to ${p2.repository.dir}."/>
        
        <antcall target="p2.publish-product">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="product.file.location" value="${p2.products.location}/base/base.product"/>
        </antcall>
        <echo message="Published base product to ${p2.repository.dir}."/>
        
		<antcall target="p2.publish-product">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="product.file.location" value="${p2.products.location}/nano/nano.product"/>
        </antcall>
        <echo message="Published nano product to ${p2.repository.dir}."/>
   
        <antcall target="p2.publish-category">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="category.file.location" value="${p2.categories.location}/org.eclipse.virgo.categories/category.xml"/>
        </antcall>
        <echo message="Published Virgo Add-Ons feature category in the p2 repository" />

        <antcall target="p2.install-virgo-product">
            <param name="repository" value="${p2.repository.dir}"/>
            <param name="destination" value="${package.output.dir}"/>
            <param name="product.iu" value="nano.product"/>
        </antcall>
        <echo message="Installed the largest Nano flavor for distribution purposes."/>
        
        <zip destfile="${package.output.file}">
			<zipfileset dir="${package.dir}" includes="${package.basename}/bin/*.sh" filemode="755"/>
			<zipfileset dir="${package.dir}" includes="${package.basename}/config/org.eclipse.virgo.kernel.jmxremote.access.properties" filemode="600"/>
			<zipfileset dir="${package.dir}">
				<exclude name="${package.basename}/bin/*.sh"/>
				<exclude name="${package.basename}/config/org.eclipse.virgo.kernel.jmxremote.access.properties"/>
			</zipfileset>
		</zip>
        <zip destfile="${artifacts.dir}\${natural.name}-updatesite-${bundle.version}.zip">
			<zipfileset dir="${p2.repository.dir}"/>
		</zip>
        
        <delete dir="${target.dir}/assembly" quiet="true"/>
        <delete dir="${common.resources.location}" quiet="true"/>
        <delete dir="${scripts.location}" quiet="true"/>
        <delete dir="${tools.dir}" quiet="true"/>
		
     </target>
    
    <target name="ci.publish.nightly" depends="package" description="Publishes nightly repository to download.eclipse.org. Can be executed on Hudson only!">
        
        <delete dir="${nightly.updatesite.dir}"/>
        
        <copy toDir="${nightly.updatesite.dir}">
            <fileset dir="${p2.repository.dir}"/>
        </copy>
        
    </target>
</project>
