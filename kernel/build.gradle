import org.apache.tools.ant.filters.ReplaceTokens

import static virgobuild.VirgoToolsPlugin.DOWNLOAD_VIRGO_BUILD_TOOLS_TASK_NAME

import virgobuild.Config

apply plugin: 'distribution'

distributions {
    main {
        baseName = 'virgo-kernel'
        contents {
            from { "${buildDir}/common_resources/" }
            from ( 'src/main/dist' ) {
                include ( '**/*.properties' )
                include ( '**/.version' )
                filter(ReplaceTokens, tokens: tokenMap) // tokens are used in e.g. oev.kernel.userregion.properties
            }
            from ( 'src/main/dist' ) {
                include ( 'bin/*.sh' )
                fileMode 0755
            }
            from ( 'src/main/dist' ) {
                exclude ( '**/*.properties' )
                exclude ( '**/.version' )
                exclude ( 'bin/*.sh' )
            }
            from ( "${buildDir}/VK/kernel/" ) { exclude ( 'Eclipse.app' ) }
            from ( "${buildDir}/" ) {
                include ( 'repository/ext/' )
                include ( 'plugins/' )
            }
        }
    }
}

task ('assembleKernel', dependsOn: ['groupInstall',]) {
    installDist.dependsOn(['assembleKernel'])
    distZip.dependsOn(['assembleKernel'])
}

task ('packageResourcesAndProducts', dependsOn: [
    ':kernel:org.eclipse.virgo.kernel.equinox.extensions:jar',
    ':kernel:org.eclipse.virgo.management.console:war',
    ':nano:org.eclipse.virgo.nano.authentication:jar',
    ':nano:org.eclipse.virgo.nano.shutdown:jar',
    ':util:org.eclipse.virgo.util.env:jar',
]) {
    doLast {
        packageConfiguration('lib', configurations.nanoLib, file("${buildDir}/common_resources/lib/"))
        packageConfiguration('libPersistence', configurations.nanoLibPersistence, file("${buildDir}/common_resources/lib/persistence/"))
        packageConfiguration('libEndorsed', configurations.nanoLibEndorsed, file("${buildDir}/common_resources/lib/endorsed/"))
        packageConfiguration('pluginsExtras', configurations.kernelPluginsExtras, "${buildDir}/common_resources/plugins")
        packageConfiguration('repositoryExt', configurations.repositoryExt, "${buildDir}/common_resources/repository/ext")
        packageConfiguration('pickup', configurations.nanoPickup, file("${buildDir}/common_resources/pickup/"))
    }
}

// start in debug mode with gradle publish<ID>
tasks.addRule("Pattern: publish<ID>") { String taskName ->
    if (taskName.startsWith("publish")) {
        task (taskName, type:JavaExec, dependsOn: [
            'packageResourcesAndProducts',
        ]) {
            def product = 'undefined'
            switch (taskName.toString() - 'publish') {
                case 'Kernel': product = 'kernel'; break
            }
            println "Publishing: " + product

            description = "Publishes a product to a p2 repository. The publishing uses ANY environment configurations."
            File repositoryDir = project.file("${project.rootProject.projectDir}/org.eclipse.virgo.site/build/repository/")
            def productFileLocation = file("${projectDir}/publish_resources/products/${product}/${product}.product")
            def javaprofileLocation = file("${projectDir}/src/main/dist/configuration/java6-server.profile")

            main = 'org.eclipse.equinox.launcher.Main'
            classpath = files("${Config.on(project).virgoBuildToolsDir}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherVersion}.jar")
            args = [
                '-application',
                'org.eclipse.equinox.p2.publisher.ProductPublisher',
                '-metadataRepository',
                "file:${repositoryDir}",
                '-artifactRepository',
                "file:${repositoryDir}",
                '-append',
                '-compress',
                '-publishArtifacts',
                '-productFile',
                "${productFileLocation}",
                '-jreLocation',
                "${javaprofileLocation}",
                '-configs',
                'ANY.ANY.ANY',
                '-flavor',
                'tooling'
            ]
            doLast() { println "Published Virgo ${productFileLocation} to '${buildDir}/repository'." }
        }
    }
}

task ('groupPublish', dependsOn: [
    'publishKernel',
]){ }

// start in debug mode with gradle publish<ID>
tasks.addRule("Pattern: installProduct<ID>") { String taskName ->
    if (taskName.startsWith("installProduct")) {
        // start in debug mode with gradle publishNanoBase --debug-jvm
        task (taskName, type:JavaExec, dependsOn: ['groupPublish',]) {
            description = "Installs a Virgo product to a desired destination. Default profile(roaming) is VIRGOProfile, the environment cofigurations are ANY."
            def product = 'undefined'
            def shortProduct = 'undefined'
            switch (taskName.toString() - 'installProduct') {
                case 'Kernel': product = 'kernel'; shortProduct = "VK"; break;
            }
            println "Installing: " + product

            File repositoryDir = project.file("${project.rootProject.projectDir}/org.eclipse.virgo.site/build/repository/")
            def destinationDir = file("${buildDir}/${shortProduct}/${product}")
            def productIu = "${product}.product"

            main = 'org.eclipse.equinox.launcher.Main'
            classpath = files("${Config.on(project).virgoBuildToolsDir}/plugins/org.eclipse.equinox.launcher_${equinoxLauncherVersion}.jar")
            args = [
                '-application',
                'org.eclipse.equinox.p2.director',
                '-repository',
                "file:${repositoryDir}",
                '-installIU',
                "${productIu}",
                '-tag',
                'InitialState',
                '-destination',
                "${destinationDir}",
                '-profile',
                'VIRGOProfile',
                '-roaming'
            ]
            doLast() { println "Installed Virgo '${productIu}' to '${destinationDir}'." }
        }
    }
}

task ('groupInstall', dependsOn: [
    'installProductKernel',
]){ }
